name: E2E CI

on:
  workflow_dispatch:
    inputs:
      lifespan_minutes:
        description: Runner lifespan in minutes
        required: true
        type: number
        default: 60
      size:
        type: choice
        description: Runner size
        default: standard-2
        options:
          - standard-2
          - standard-4
          - standard-8
          - standard-16
      boot_image:
        type: choice
        description: Runner boot image
        default: ubuntu-2204
        options:
          - ubuntu-2204
          - ubuntu-2004

      arch:
        type: choice
        description: Runner architecture
        default: x64
        options:
          - x64
          - arm64

jobs:
  run-ci:
    runs-on: ubicloud
    environment: E2E-CI
    timeout-minutes: 45
    concurrency: e2e_environment

    env:
      DB_USER: clover
      DB_PASSWORD: nonempty
      DB_NAME: clover_test

    services:
      postgres:
        image: postgres:15.4
        env:
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Perform superuser-only actions, then remove superuser
      run: |
        psql "postgres://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@localhost:5432/${{ env.DB_NAME }}" \
          -c "CREATE EXTENSION citext; CREATE EXTENSION btree_gist; CREATE ROLE clover_password PASSWORD '${{ env.DB_PASSWORD }}' LOGIN; ALTER ROLE ${{ env.DB_USER }} NOSUPERUSER"

    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: .tool-versions
        bundler-cache: true

    - name: Apply migrations
      env:
        CLOVER_DATABASE_URL: postgres://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@localhost:5432/${{ env.DB_NAME }}
      run: bundle exec rake test_up

    - name: Install ngrok
      run: curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok

    - name: Set ngrok token
      run: ngrok config add-authtoken ${{ secrets.NGROK_TOKEN }}

    - name: Local to public
      run: ngrok http --domain=${{ secrets.NGROK_ADDRESS }} http://127.0.0.1:5000 > /dev/null &

    - name: Install foreman
      run: gem install foreman

    - name: Add e2e script to Procfile
      run: |
        echo "e2e: bin/ci" >> Procfile

    - name: Run services
      env:
        RACK_ENV: development
        CLOVER_DATABASE_URL: postgres://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@localhost:5432/${{ env.DB_NAME }}
        CLOVER_SESSION_SECRET: kbaf1V3biZ+R2QqFahgDLB5/lSomwxQusA4PwROUkFS1srn0xM/I47IdLW7HjbQoxWri6/aVgtkqTLFiP65h9g==
        CLOVER_COLUMN_ENCRYPTION_KEY: TtlY0+hd4lvedPkNbu5qsj5H7giPKJSRX9KDBrvid7c=
        CI_HETZNER_SACRIFICIAL_SERVER_ID: ${{ secrets.CI_HETZNER_SACRIFICIAL_SERVER_ID }}
        HETZNER_USER: ${{ secrets.HETZNER_USER }}
        HETZNER_PASSWORD: ${{ secrets.HETZNER_PASSWORD }}
        UBICLOUD_IMAGES_BLOB_STORAGE_ENDPOINT: ${{ secrets.UBICLOUD_IMAGES_BLOB_STORAGE_ENDPOINT }}
        UBICLOUD_IMAGES_BLOB_STORAGE_ACCESS_KEY: ${{ secrets.UBICLOUD_IMAGES_BLOB_STORAGE_ACCESS_KEY }}
        UBICLOUD_IMAGES_BLOB_STORAGE_SECRET_KEY: ${{ secrets.UBICLOUD_IMAGES_BLOB_STORAGE_SECRET_KEY }}
        UBICLOUD_IMAGES_BLOB_STORAGE_CERTS: ${{ secrets.UBICLOUD_IMAGES_BLOB_STORAGE_CERTS }}
        GH_APP_CLIENT_ID: ${{ secrets.GH_APP_CLIENT_ID }}
        GH_INSTALLATION_ID: ${{ secrets.GH_INSTALLATION_ID }}
        GH_APP_CLIENT_SECRET: ${{ secrets.GH_APP_CLIENT_SECRET }}
        GH_APP_NAME: ${{ secrets.GH_APP_NAME }}
        GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
        GH_APP_WEBHOOK_SECRET: ${{ secrets.GH_APP_WEBHOOK_SECRET }}
        GH_PAT: ${{ secrets.GH_PAT }}
        GH_APP_ID: ${{ secrets.GH_APP_ID }}
        GH_RUNNER_SERVICE_PROJECT_ID: ${{ secrets.GH_RUNNER_SERVICE_PROJECT_ID }}

      run: timeout 40m foreman start

    - name: Send notification if failed
      if: ${{ failure() && github.ref_name == 'main' }}
      run: echo "E2E tests failed on main branch. Please check the logs."
