name: Provision Runner

on:
  workflow_dispatch:
    inputs:
      count:
        description: Runner count
        required: true
        type: number
        default: 1
      lifespan_minutes:
        description: Runner lifespan in minutes. 0 for immediate termination
        required: true
        type: number
        default: 0
      label:
        type: choice
        description: Label
        default: ubicloud-standard-2
        options:
          - ubicloud-gpu
          - ubicloud-gpu-standard-1-latest
          - ubicloud-standard-2
          - ubicloud-standard-4
          - ubicloud-standard-8
          - ubicloud-standard-16
          - ubicloud-standard-30
          - ubicloud-standard-60
          - ubicloud-standard-2-arm
          - ubicloud-standard-4-arm
          - ubicloud-standard-8-arm
          - ubicloud-standard-16-arm
          - ubicloud-standard-30-arm
          - ubicloud-standard-60-arm
          - ubicloud-standard-2-ubuntu-2004
          - ubicloud-standard-4-ubuntu-2004
          - ubicloud-standard-8-ubuntu-2004
          - ubicloud-standard-16-ubuntu-2004
          - ubicloud-standard-30-ubuntu-2004
          - ubicloud-standard-60-ubuntu-2004
          - ubicloud-standard-2-ubuntu-2404
          - ubicloud-standard-4-ubuntu-2404
          - ubicloud-standard-8-ubuntu-2404
          - ubicloud-standard-16-ubuntu-2404
          - ubicloud-standard-30-ubuntu-2404
          - ubicloud-standard-60-ubuntu-2404
          - ubicloud-standard-2-arm-ubuntu-2004
          - ubicloud-standard-4-arm-ubuntu-2004
          - ubicloud-standard-8-arm-ubuntu-2004
          - ubicloud-standard-16-arm-ubuntu-2004
          - ubicloud-standard-30-arm-ubuntu-2004
          - ubicloud-standard-60-arm-ubuntu-2004

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          echo "matrix="$(echo [$(seq -s, 1 ${{ inputs.count }})])"" >> $GITHUB_OUTPUT

  run:
    name: runner ${{ matrix.index }}
    needs: generate-matrix
    runs-on: ${{ inputs.label }}
    strategy:
      matrix:
        index: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: nvidia-smi
        if: ${{ contains(inputs.label, 'gpu') }}
        run: nvidia-smi

      - name: uname -mr
        run: uname -mr

      - name: lsb_release -a
        run: lsb_release -a

      - name: printenv
        run: printenv

      - name: IPv4 SSH Command
        if: ${{ inputs.lifespan_minutes > 0 }}
        run: |
          IPv4=$(curl -sL --ipv4 ifconfig.me)
          echo "ssh runneradmin@$IPv4"

      - name: Deploy dev ssh keys
        if: ${{ inputs.lifespan_minutes > 0 }}
        run: |
          sudo sh -c 'cat development.keys >> /home/runneradmin/.ssh/authorized_keys'
          sudo sh -c 'cat /home/runneradmin/.ssh/authorized_keys'

      - name: Sleep
        if: ${{ inputs.lifespan_minutes > 0 }}
        run: sleep $((${{ inputs.lifespan_minutes }} * 60))

  generate-summary:
    runs-on: ubuntu-latest
    needs: [generate-matrix, run]
    permissions:
      contents: read
      actions: read
    steps:
      - uses: actions/github-script@v7
        id: check-queue-time
        with:
          script: |
            github
              .paginate("GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                attempt_number: ${{ github.run_attempt }},
              })
              .then((jobs) => {
                const runnerJobs = jobs.filter((job) => job.name.startsWith("runner"));
                const queueTimes = [];
                const runnerTable = [
                  [{data: 'Job', header: true}, {data: 'Runner', header: true}, {data: 'Queue Time', header: true}],
                  ...runnerJobs.map((job) => {
                    const queueTime = (new Date(job.started_at) - new Date(job.created_at)) / 1000;
                    queueTimes.push(queueTime);
                    return [job.name, job.runner_name, `${queueTime} seconds`];
                  }),
                ];
                const sortedQueueTimes = queueTimes.sort((a, b) => a - b);
                const summaryTable = [
                  ["Label", "${{ inputs.label }}"],
                  ["Count", "${{ inputs.count }} runners"],
                  ["Average", `${(sortedQueueTimes.reduce((a, b) => a + b, 0) / queueTimes.length).toFixed(2)} seconds`],
                  ["Min", `${sortedQueueTimes[0]} seconds`],
                  ["Max", `${sortedQueueTimes[sortedQueueTimes.length - 1]} seconds`],
                  ["P50", `${sortedQueueTimes[Math.ceil(queueTimes.length * 0.5) - 1]} seconds`],
                  ["P90", `${sortedQueueTimes[Math.ceil(queueTimes.length * 0.9) - 1]} seconds`],
                  ["P99", `${sortedQueueTimes[Math.ceil(queueTimes.length * 0.99) - 1]} seconds`],
                ];
                core.summary
                  .addHeading("Summary :bar_chart:")
                  .addTable(summaryTable)
                  .addHeading("Details :stopwatch:")
                  .addTable(runnerTable)
                  .write();
              });
